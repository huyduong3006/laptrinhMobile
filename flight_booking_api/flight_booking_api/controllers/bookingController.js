const pool = require("../db"); // mysql2/promise connection

const formatDateTime = (isoString) => {
  if (!isoString) {
    throw new Error("Ng√†y kh√¥ng h·ª£p l·ªá: " + isoString);
  }

  const date = new Date(isoString);
  if (isNaN(date.getTime())) {
    throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ng√†y: " + isoString);
  }

  const offsetDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
  return offsetDate.toISOString().slice(0, 19).replace('T', ' ');
};
// T·∫°o v√© chuy·∫øn bay (Booking)
exports.createBooking = async (req, res) => {
    console.log("üì• Body nh·∫≠n ƒë∆∞·ª£c:", req.body);
const {
  userId,
  tu,
  den,
  ngayDi,
  ngayVe,
  quantity,
  ticketType,
  price,
  tax,
  totalPrice,
  paymentMethod,
  tenNganHang,
  soTaiKhoan,
  noiDung
} = req.body;
  console.log("üî• Th√¥ng tin nh·∫≠n ƒë∆∞·ª£c khi t·∫°o booking:", req.body);
  console.log("üëâ ngayDi =", ngayDi);
  console.log("üëâ ngayVe =", ngayVe);

  try {
    const ngayDiFormatted = formatDateTime(ngayDi);
    const ngayVeFormatted = formatDateTime(ngayVe);

    const [result] = await pool.query(
      `INSERT INTO Booking
        (userId, tu, den, ngayDi, ngayVe, quantity, ticketType, price, tax, totalPrice, paymentMethod)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [userId, tu, den, ngayDiFormatted, ngayVeFormatted, quantity, ticketType, price, tax, totalPrice, paymentMethod]
    );
    const bookingId = result.insertId;
    if (!bookingId) {
      return res.status(500).json({ message: "T·∫°o booking th·∫•t b·∫°i" });
    }

    const [rows] = await pool.query(`SELECT * FROM Booking WHERE id = ?`, [bookingId]);
    if (rows.length === 0) {
      return res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y booking sau khi th√™m" });
    }
    res.status(201).json(rows[0]);
  } catch (err) {
    console.error("L·ªói t·∫°o booking:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

// --- L·∫•y to√†n b·ªô booking ---
exports.getAllBookings = async (req, res) => {
  try {
    const [rows] = await pool.query("SELECT * FROM Booking ORDER BY createdAt DESC");
    res.json(rows);
  } catch (err) {
    console.error("L·ªói getAllBookings:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

// --- L·∫•y booking theo username ---
exports.getBookingsByUsername = async (req, res) => {
  const { username } = req.params;
  try {
    const [rows] = await pool.query(
      `SELECT b.* FROM Booking b
       JOIN Users u ON b.userId = u.id
       WHERE u.username = ? ORDER BY b.createdAt DESC`,
      [username]
    );
    res.json(rows);
  } catch (err) {
    console.error("L·ªói getBookingsByUsername:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

// --- L·∫•y booking m·ªõi nh·∫•t theo userId ---
exports.getLatestBookingByUserId = async (req, res) => {
  const { userId } = req.params;

  try {
    const [rows] = await pool.query(
      `SELECT * FROM Booking 
       WHERE userId = ? 
       ORDER BY id DESC 
       LIMIT 1`,
      [userId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking n√†o cho user n√†y" });
    }

    res.status(200).json(rows[0]);
  } catch (err) {
    console.error("L·ªói getLatestBookingByUserId:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

// --- L·∫•y h√≥a ƒë∆°n theo bookingId (booking + invoice info) ---
exports.getInvoiceByBookingId = async (req, res) => {
  const { bookingId } = req.params;

  try {
    const [rows] = await pool.query(
      `SELECT b.*, h.id AS invoiceId, h.createdAt AS invoiceDate
       FROM Booking b
       LEFT JOIN HoaDon h ON h.bookingId = b.id
       WHERE b.id = ?`,
      [bookingId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n cho booking n√†y" });
    }

    res.status(200).json(rows[0]);
  } catch (err) {
    console.error("L·ªói l·∫•y h√≥a ƒë∆°n theo bookingId:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

// --- L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n c·ªßa userId (c√≥ th·ªÉ d√πng ƒë·ªÉ xem l·ªãch s·ª≠ h√≥a ƒë∆°n) ---
exports.getInvoicesByUserId = async (req, res) => {
  const { userId } = req.params;

  try {
    const [rows] = await pool.query(
      `SELECT b.*, h.id AS invoiceId, h.createdAt AS invoiceDate
       FROM Booking b
       LEFT JOIN HoaDon h ON h.bookingId = b.id
       WHERE b.userId = ?
       ORDER BY h.createdAt DESC`,
      [userId]
    );

    res.status(200).json(rows);
  } catch (err) {
    console.error("L·ªói l·∫•y h√≥a ƒë∆°n theo userId:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};

const getVietnamTime = () => {
  const now = new Date();
  const vietnamTime = new Date(now.getTime() + 7 * 60 * 60 * 1000); // UTC+7
  return vietnamTime.toISOString().slice(0, 19).replace('T', ' ');
};

exports.updateInvoicePaymentInfo = async (req, res) => {
  const { bookingId, tenNganHang, soTaiKhoan, noiDung } = req.body;

  // Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  console.log("==== [API] updateInvoicePaymentInfo ====");
  console.log("Body nh·∫≠n ƒë∆∞·ª£c:", req.body);

  if (!bookingId || !tenNganHang || !soTaiKhoan || !noiDung) {
    console.error("‚ùå Thi·∫øu th√¥ng tin thanh to√°n: ", req.body);
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n" });
  }

  const createdAt = getVietnamTime();

  try {
    console.log("Th√¥ng tin ho√° ƒë∆°n:", {
      bookingId, tenNganHang, soTaiKhoan, noiDung, createdAt
    });

    const [result] = await pool.query(
      `INSERT INTO HoaDon (bookingId, tenNganHang, soTaiKhoan, noiDung, createdAt)
       VALUES (?, ?, ?, ?, ?)`,
      [bookingId, tenNganHang, soTaiKhoan, noiDung, createdAt]
    );

    console.log("‚úîÔ∏è L∆∞u h√≥a ƒë∆°n th√†nh c√¥ng:", result);

    res.status(200).json({ message: "C·∫≠p nh·∫≠t h√≥a ƒë∆°n th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói l∆∞u h√≥a ƒë∆°n:", err);
    if (err && typeof err === "object") {
      console.error("‚ùå Th√¥ng tin l·ªói chi ti·∫øt:");
      for (const key in err) {
        if (Object.hasOwnProperty.call(err, key)) {
          console.error(`    ${key}:`, err[key]);
        }
      }
    }
    res.status(500).json({ message: "L·ªói l∆∞u thanh to√°n", error: err });
  }
};
